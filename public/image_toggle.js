<script type="text/javascript">

/*
Image Toggler/Accordion for Jive - by Dave Myers - 02/05/2012
If you like this HTML widget, consider taking a few minutes and watching one of the videos at this site: http://www.rpflix.com/

Introduction:
This widget allows you to create a jive document and configure it to display images, and text to expand below the image when the image is clicked.

Prerequisites:
* In order to use this script, you must update the "HTML Widget Configuration" section below. 
* You must create a document in a public container. The document must have 1 table for each row of images you wish to have
* You must set the "enabled_toggle_debug" to false after you verifying the table data is being pulled in by the widget.
* The table must have a header row, and content starts on Row number 2. For each row of images, you must create a new table, multiple rows in a table are placed next to each other. you may have any number of content rows as you like. The format for the table is below:

| Image 		| Image Text		| Toggle Text			| Optional URL to pull content from 	| 	Selector to use with the URL	|
| <your image> 	| <your text>		| <your toggle text>	| <your URL>							| 	<a selector value>			 	|

Image : The image that is clicked to expose the Toggle text or URL content
Image Title : Text that is placed under an image, or used for accordion style config
* You  must have either an image or image text in order to utilize this widget

Toggle Text : Text that is displayed when a user clicks the image or text
URL : Optionally you can pull content from jive documents linked here. Note: The documents must reside on the same server. If there is text within the toggle text column that text will be used instead of the URL content body
Selector: This is optional, if you wish to use a different jquery selector other then the one specified in the toggle_area_class, type the selector value here. Note it must be a valid jquery selector.

Image Limitations:
There are two options for the images (use the image thumbnail generated by Jive, or use the inserted image width/height). By setting useThumbImage to true, you will use the generated thumbnail from Jive. If you do this, you will need to make sure that the inserted image is at least as wide as the setting for "Maximum image width before forcing thumbnail view:" in the admin console --> system --> Settings --> Image configuration. 

For example: My instances force thumbnail setting is set to 450 within the admin console. Below I've set the coin_container_width to 450 and the height to 230. So I want to make sure my images are at least 450px wide and at least 230px in height. Images with height and width greater then that will be scaled to fit within the container.

Limitations:
* You can only have 1 of these widgets per container

*/


/* HTML Widget Configuration */
var enabled_toggle_debug = false; // (true/false) - Enable the debugger by setting to true, when final testing is complete set this to false

var toggle_sourceURL = '/docs/DOC-3172'; // the document to pull the table data from

//var toggle_area_class = '.jive-content-body';	// Used with the jquery .load to get a subset of the document content.
var toggle_area_class = '#jive-body-main div.jive-rendered-content';

var useThumbImageToggle = false; 	//(true/false) - used to display either the Jive thumbnail image or the actuall image dimensions, set to either true (use thumb) or false (use image width/height)

var toggle_center_images = false; // (true/false) - Set to true to center the images, false to left align

var toggle_img_width = '36px';  // Should be the same width as your images, set slightly larger for padding, or even larger if you have title text

var toggle_img_height = '32px'; // Should be the same height as your images, set slightly larger for padding, or even larger if you have title text

var toggle_text_width = '';	// Set the width of the caption text box. Leave blank to be 100%

var use_text_no_image = false; 	// (true/false) - If you'd like to turn this widget into an accordion, and only use text with no images, set this value to true.
</script>


<style type="text/css">

/* The top level container*/
#image_toggleContainer {
	margin-left: 0; 
	margin-right: 0;
	padding: 5px;
}


/* The container that holds the toggle text or URL content */
.toggle_hide {
	display: none;
    padding-left:5px;
	padding-right:5px;
	padding-bottom:20px;
	padding-top: 10px;
}

/* Adjust the margin of content pulled in via the URL*/
.toggle_hide .jive-content-body {
	margin: 0;
}


/* The box that is displayed around the image and text */
.toggle_picture_box {
    border: 1px solid #CCCCCC;
    margin-bottom: 5px;
    text-align: center;
    vertical-align: middle;
	margin-right: 5px;
}

.toggle_img_left {
    display: block;
	float: left;
    font-size: 11px;
    overflow: hidden;
    padding: 2px;
    position: relative;
}

/* The box that is displayed around the image, if use_text_no_image=true */
.toggle_picture_box_text {
    border: 1px solid #CCCCCC;
    margin-bottom: 2px;
    text-align: left;
    vertical-align: middle;
	margin-right: 5px;
	
}

.toggle_img_left_text {
    display: block;
	float: left;
    font-size: 16px;
    overflow: hidden;
    padding: 2px;
    position: relative;
}

.toggle_img_left_text a:hover {
	display:block;
	background-color:#c8c8c8;
	text-decoration: none;
}

/* Styles the table around the results used for toggle_center_table parameter */
#toggle_center_table {
	margin: -1px;
	padding: 0;
	border: 0;
	border-spacing: 0;
}

</style>



<script type="text/javascript">
// Load the table data and build javascript functions


$j('document').ready(function(){
//console.time('Content_Loader'); 

	// Variables for "caching" of reusable selectors
	var tmpToggleResultArea = '';
	var tmpToggleResultHTML = '';
	var tmpToggleDivResultHTML = '';
	var tmpDebugToggleResultHTML = '';
	var tmpToggleImgContainer = '';
	

	if(enabled_toggle_debug) {
		console.log('Image Toggle: Content Page = ' + toggle_sourceURL);
		tmpDebugToggleResultHTML += 'Image Toggle: Content Page = ' + toggle_sourceURL + '\r\n';
	}

	if(!toggle_sourceURL) {
		return false;
	}

	// Display the waiting spinner
	var loadingImgSrc = $j('#jive-widgets-panel-loading img').attr('src');
	$j("#image_toggle_loading").attr('src',loadingImgSrc);
	$j("#image_toggle_spinner").show();
	
	tmpToggleResultArea = $j("#image_toggleResultArea");

	// Hide the container that stores the load data
	tmpToggleResultArea.hide();

	// Do a jquery .load of the source table document, and only bring in the data defined with the toggle_area_class element
	tmpToggleResultArea.load(toggle_sourceURL + ' ' + toggle_area_class, function(response, status, xhr) {
		if(enabled_toggle_debug) {
			console.log('Image Toggle: AJAX .load status: ' + status);
		}
		
		if (status == "error") {
			var msg = "Sorry but there was an error: ";
			var msgfour = " Most likley reason is because your toggle_sourceURL variable is not pointing to a valid document";
			tmpToggleResultArea.html(msg + xhr.status + " " + xhr.statusText + msgfour);
			tmpToggleResultArea.show();
			return false;
		} else {
			
			// Check to see if there is a table in the image_toggleResultArea
			if($j('#image_toggleResultArea table').length > 0) {
				// Check to make sure there are at least five table rows
				if($j('table tr:eq(1) td', '#image_toggleResultArea').length < 5) {
					console.log('Image Toggle: table does not have at least 5 columns, please properly create your content table.');
					tmpToggleResultArea.html('Image Toggle: table does not have at least 5 columns, please properly create your content table. It has: ' + $j('table tr:eq(1) td', '#image_toggleResultArea').length);
					tmpToggleResultArea.show();
				} 
				
			} else {
				console.log('Image Toggle: No HTML returned from AJAX call, please check toggle_area_class and toggle_sourceURL variables. You may not have created the table in the source content document.');
				tmpToggleResultArea.html('Error: No HTML returned from AJAX call, please check toggle_area_class and toggle_sourceURL variables. You may not have created the table in the source content document.');
				tmpToggleResultArea.show();
				return false;
			}
			
			// Call the function for formating the table data to be used by Toggle Image Toggle
			loadTableDataToggle();
		}

	});

	// Load the table data
	function loadTableDataToggle() {
		
		// If needed a timeout function is added, set the parameter at the end to MS value to force a load delay
		setTimeout( function() {
			
			if(enabled_toggle_debug) {
				console.log('Image Toggle: image_toggleResultArea html = ' + $j("#image_toggleResultArea").html());
				//tmpDebugToggleResultHTML += 'Image Toggle: image_toggleResultArea html = ' + $j("#image_toggleResultArea").html() + '\r\n';
				if ($j('#image_toggleResultArea table').length > 0) {
					console.log('Image Toggle: A table exists in the content!');
					tmpDebugToggleResultHTML += 'Image Toggle: A table exists in the content!\r\n';
				}
			}
					
			// Hide the content table
			$j('table', '#image_toggleResultArea').hide();
			
			// Get the number of tables
			var tableNums = $j('table', '#image_toggleResultArea');
			$jtblcnt = tableNums.length;
			if(enabled_toggle_debug) {
				console.log('Image Toggle: total number of tables: ' + $jtblcnt);
				tmpDebugToggleResultHTML += 'Image Toggle: total number of tables: ' + $jtblcnt + '\r\n';
			}
			
			// Loop over the tables and seperate the content
			for (var tb = 0; tb < $jtblcnt; tb++) {
			
				if(enabled_toggle_debug) {
					tmpDebugToggleResultHTML += '----------- Begin Table For Iteration --------------\r\n'; 
					console.log('Image Toggle: current Table loop iteration: ' + tb);
					tmpDebugToggleResultHTML += 'Image Toggle: current Table loop iteration: ' + tb + '\r\n';
				}
			
			
				// Get the number of rows in the table
				var tableRows = $j('table:eq('+tb+') tr', '#image_toggleResultArea');
				$jcntt = tableRows.length;
				
				if(enabled_toggle_debug) {
					console.log('Image Toggle: total number of table rows: ' + $jcntt);
					tmpDebugToggleResultHTML += 'Image Toggle: total number of table rows: ' + $jcntt + '\r\n';
				}

				// set variables for temporarily storing table data
				var rowTitle = '';
				var rowCaption = '';
				var rowCaptionWidth = '';
				var rowUrl = '';
				var rowURLContainer = '';
				var rowImage = '';
				var rowImgSrc = '';
				var rowImgWidth = '';
				var rowImgHeight = '';
				var showSpan = '';
				var rowFinalHref = '';
				var rowTitleImageSpan = '';
				

				// Loop over the table rows and build Toggle Image Toggle data
				for (var i = 1; i < $jcntt; i++) {
					
					if(enabled_toggle_debug) {
						tmpDebugToggleResultHTML += '------- Begin For Iteration ----------\r\n'; 
						console.log('Image Toggle: current loop iteration: ' + i);
						tmpDebugToggleResultHTML += 'Image Toggle: current loop iteration: ' + i + '\r\n';
					}
					
					// Assign an ID to the processed table row for quickly accessing in jquery
					$j('table:eq('+tb+') tr:eq('+i+')', '#image_toggleResultArea').attr('id','toggle_currow');
					
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Image Column HTML = ' + $j('#toggle_currow td:eq(0)').html());
						//tmpDebugToggleResultHTML += 'Image Toggle: Image Column HTML = ' + $j('#toggle_currow td:eq(2)').html() + '\r\n';
					}
					
					if(useThumbImageToggle) {
						// thumb URL
						rowImgSrc = $j('#toggle_currow td:eq(0)', '#image_toggleResultArea').find('img').attr('src');
					} else {
						// standard URL
						rowImgSrc = $j('#toggle_currow td:eq(0)', '#image_toggleResultArea').find('a').attr('href');			
					}
					
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Image Src URL (rowImgSrc) = ' + rowImgSrc);
						//tmpDebugToggleResultHTML += 'Image Toggle: Image Src URL (rowImgSrc) = ' + rowImgSrc + '\r\n';
					}
					

					// Complete the img src tag
					rowImage = '<img src="' + rowImgSrc + '" />';
					if(enabled_toggle_debug) {
						console.log('rowImage: ' + rowImage);
						tmpDebugToggleResultHTML += 'Image Toggle: You selected useThumbImageToggle as ' + useThumbImageToggle + ' rowImage value: ' + rowImage + '\r\n';
					}
					
					// Get the row title
					rowTitle = $j('#toggle_currow td:eq(1)', '#image_toggleResultArea').text();
					rowTitle = $j.trim(rowTitle);
					
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Row Title = ' + rowTitle);
						tmpDebugToggleResultHTML += 'Image Toggle: Row Title = ' + rowTitle + '\r\n';
					}
					
					
					// Get the row caption for the title text
					rowCaption = $j('#toggle_currow td:eq(2)', '#image_toggleResultArea').html();
					rowCaption = $j.trim(rowCaption);
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Row Caption = ' + rowCaption);
						tmpDebugToggleResultHTML += 'Image Toggle: Row Caption = ' + rowCaption + '\r\n';
					}
					
					/* Check the contents of rowCaption for leftover carriage returns paragraph tags
						matches: 
						<p> </p>
						<p>&nbsp;</p>
						<br> or <br />
					*/
					var stripRegPattern = /[<][p][>][&][n][b][s][p][;][<][/][p][>]|[<][p][>][ ][<][/][p][>]|[<][b][r].*?[>]|[<][B][R].*?[>]/;
					if(rowCaption.toLowerCase().match(stripRegPattern) && rowCaption.length < 10) {
						rowCaption = '';
					}

					
					// Get the URL value for the row
					rowUrl = $j('#toggle_currow td:eq(3)', '#image_toggleResultArea').find('a').attr('href');
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Row URL = ' +rowUrl);
						tmpDebugToggleResultHTML += 'Image Toggle: Row URL = ' + rowUrl + '\r\n';
					}
					
					
					// Get the URL container - this is used if you want to specify some other Jive element to include as content
					rowURLContainer = $j('#toggle_currow td:eq(4)', '#image_toggleResultArea').text();
					
					
					// Check to ensure the URL hostname is the same as the servers hostname
					// If they are not the same then the .load ajax call will be killed			
					if(rowUrl) {
						if(rowUrl.toLowerCase().indexOf(window.location.host.toLowerCase()) == -1) {
							rowCaption = 'ERROR - a problem exists in table ' + (tb+1) + ' row ' + i + ': you have used a URL (' + rowUrl + ') that is not in the same domain as your Jive instance. Please type text in the toggle text column or use a URL in the domain: <b>' + window.location.host + '</b>';
							rowUrl = '';
						}
					}

					// Set a rev attribute if the URL column has a value. Only set the attribute if rowCaption is blank
					if(!rowCaption && rowUrl) {
						rowFinalHref = '<a href="#" class="image_toggle_click" rev="' + rowUrl + ' -- ' + rowURLContainer + '" rel="toggle_content_table' + tb + '_tr_' + i + '">';
					} else {
						rowFinalHref = '<a href="#" class="image_toggle_click" rel="toggle_content_table' + tb + '_tr_' + i + '">';
					}
					
										
		
					// If use_text_no_image is set to true, use the rowTitle as an accordion style
					rowTitleImageSpan = use_text_no_image ? '<span class="toggle_picture_box_text toggle_img_left_text" style="width:' + toggle_img_width + '; height:' + toggle_img_height + ';">' + rowFinalHref + rowTitle + '</a></span>' : '<span class="toggle_picture_box toggle_img_left" style="width:' + toggle_img_width + '; height:' + toggle_img_height + ';">' + rowFinalHref + rowImage + '<br />' + rowTitle + '</a></span>';
					

					tmpToggleResultHTML += rowTitleImageSpan;
					
					if(enabled_toggle_debug) {
						tmpDebugToggleResultHTML += 'Image Toggle: Final image HTML is = ' + rowTitleImageSpan + ' \r\n';
					}
					
					
					// Set the rowCaption text width if value is set in config
					if(toggle_text_width) {
						rowCaptionWidth = ' style="width:+' + toggle_text_width + ';" ';
						
						if(enabled_toggle_debug) {
							tmpDebugToggleResultHTML += 'Image Toggle: Row content is set to this width = ' + rowCaptionWidth + ' = \r\n';
						}
						
					}
					
					// Add the caption content
					tmpToggleDivResultHTML += '<div id="toggle_content_table' + tb + '_tr_' + i + '" class="toggle_hide"' + rowCaptionWidth + '>' + rowCaption + '</div>';
									
					
					// Blank out the ID attribute of the current row
					$j('table:eq('+tb+') tr:eq('+i+')', '#image_toggleResultArea').attr('id','');	
					if(enabled_toggle_debug) {
						console.log('------- End For Iteration ----------');
						tmpDebugToggleResultHTML += '------- End For Iteration ----------\r\n \r\n'; 
					}
				} // end for table row loop
			
				tmpToggleResultHTML += '<div style="clear:both;"></div>';
				
				if(enabled_toggle_debug) {
					tmpDebugToggleResultHTML += '----------- End Table For Iteration --------------\r\n'; 
				}
								
				
				// Append the loop HTML to the resultArea
				$j('#toggle_articles', '#image_toggleContainer').append(tmpToggleResultHTML + '<div style="clear:both;"></div>' +  tmpToggleDivResultHTML);
				
				// blank out variable values
				tmpToggleResultHTML = '';
				tmpToggleDivResultHTML = '';
				
				
			} // end table for loop
			

			if(enabled_toggle_debug) {
				console.log('Image Toggle: #toggle_articles = ' + tmpToggleResultArea.html());
				document.image_toggle_debug_form.debug_image_toggleTA.value = tmpDebugToggleResultHTML;
				$j('#debug_image_toggle').show();
			}
			
			
				// Center the images if centering is true
				if(toggle_center_images) {
					$j('#toggle_center_table').css({
						'margin-left': 'auto',
						'margin-right': 'auto'
					});

				} 
			
			
			// Call the function for the toggle here
			$j("#image_toggle_spinner").hide();
			
		// Set the zero below to a value in MS like 1000 (1 second) if you have a large page to load
		}, 0 );
	
	} // end loadTableDataToggle function


	// function used to display the block of text under the image row
	$j('.image_toggle_click').live('click',function(event){
		event.preventDefault();
		var $jopt = $j(this);
		var whichrel = $jopt.attr('rel');
		var isRev = $jopt.attr('rev');
		
		// Change the font text to bold and border color
		$j('.toggle_picture_box').css({'font-weight': 'normal', 'border-color': ''});
		$j('.toggle_picture_box_text').css({'font-weight': 'normal', 'border-color': ''});
		$jopt.parent().css({'font-weight': 'bold', 'border-color': '#888888'});
		
		// If the caption is blank and a URL exists in the table lets include it via get
		if(isRev) {
			
			//$j('#' + whichrel).html('<p style="color: red;">Loading...</p>');
			$j('#' + whichrel).html('<center><p class="font-color-meta-light"><img src="' + loadingImgSrc + '" />Loading...</p></center>');
			
			/*
			Split the isRev to see if a URL container exists
			revsubstr[0] contains <the URL to pull content from>
			revsubstr[1] contains <the container containing the subset of data you wish to display>
			*/
			 
			var revsubstr = isRev.split(' -- ');
			if(revsubstr[1] == '') {
				revsubstr[1] = toggle_area_class;
			}
			
			// Load the content set in the rev property of the image click
			$j('#' + whichrel).load(revsubstr[0] + ' ' + revsubstr[1], function(response, status, xhr) {
			
				if (status == "error") {
					var msg = "Sorry but there was an error: ";
					var msgfour = " Most likley reason is because your toggle_sourceURL variable is not pointing to a valid document";
					tmpToggleResultArea.html(msg + xhr.status + " " + xhr.statusText + msgfour);
					tmpToggleResultArea.show();
					return false;
				} 
				
				if(status == "success") {
					if(enabled_toggle_debug) {
						console.log('Image Toggle: Image was ajax call response was  ' + $j('#' + whichrel).html());
					}
				}
								
			}); // End .load
		} // End the If(isRev) statement
		

		// Toggle the element to show its content
		$j('#' + whichrel).is(":visible") ? $j('#' + whichrel).hide() : $j('#' + whichrel).slideToggle();
		$j('.toggle_hide').not($j('#' + whichrel)).hide();

		return false;

	});	// End the image_toggle_click function
	
	
	
//console.timeEnd('Content_Loader'); 
}); // end ready function
</script>

<div id="image_toggleContainer">
<div id="debug_image_toggle" style="display:none;"><form name="image_toggle_debug_form"><textarea id="debug_image_toggleTA" rows="30" cols="55"></textarea><br /><br /><br /></div>
<div id="image_toggleResultArea" style="display:none;"></div>

		<center><div id="image_toggle_spinner" style="display: none">
		<p class="font-color-meta-light"><img id="image_toggle_loading" src="" alt="" />Loading...</p>
		<p> <br /> </p>
		</div></center>	
		
		
<table id="toggle_center_table" style=""><tr><td><div id="toggle_articles"></div></td></tr></table>
</div>
